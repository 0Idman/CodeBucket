#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CodeBucket.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class DiffView : DiffViewBase
{

#line hidden

#line 1 "DiffView.cshtml"
public DiffViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html><head>\n<meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable" +
"=0\"");

WriteLiteral("/>\n<style>\nbody {\n    margin:0;\n}\n\ntable.diff {\n    border-collapse:collapse;\n   " +
" border:1px solid darkgray;\n    white-space:pre;\n    width:100%;\n}\ntable.diff tb" +
"ody { \n    font-family:Courier, monospace\n}\ntable.diff tbody th {\n    font-famil" +
"y:verdana,arial,\'Bitstream Vera Sans\',helvetica,sans-serif;\n    background:#EED;" +
"\n    font-weight:normal;\n    border:1px solid #BBC;\n    color:#886;\n    padding:" +
".3em .3em;\n    text-align:right;\n}\ntable.diff thead {\n    border-bottom:1px soli" +
"d #BBC;\n    background:#EFEFEF;\n    font-family:Verdana;\n}\ntable.diff thead th.t" +
"exttitle {\n    text-align:left\n}\ntable.diff tbody td {\n    padding:.3em .4em;\n  " +
"  width: 100%;\n}\ntable.diff .empty {\n    background-color:#DDD;\n}\ntable.diff .re" +
"place {\n    background-color:#FD8\n}\ntable.diff .delete {\n    background-color:#E" +
"99;\n}\ntable.diff .skip {\n    background-color:#EFEFEF;\n    border:1px solid #AAA" +
";\n    border-right:1px solid #BBC;\n}\ntable.diff .insert {\n    background-color:#" +
"9E9\n}\ntable.diff th.author {\n    text-align:left;\n    border-top:1px solid #BBC;" +
"\n    background:#EFEFEF\n}\n\n.comment > td {\nbackground:#EED;\nborder:1px solid #BB" +
"C;\n}\n\n.comment > td > div.inner {\nmargin: 10px;\nborder-radius: 3px;\nbackground:#" +
"fff;\nborder:1px solid #BBC;\npadding: 15px 10px 10px 10px;\n}\n\n.comment > td > div" +
".inner > header {\npadding-left:43px;\nposition:relative;\ncolor:#3b73af;\nfont-weig" +
"ht: bold;\ndisplay:inline;\n}\n\n.comment > td > div.inner > header > img {\nposition" +
": absolute;\ntop: 0px;\nleft: 0px;\nborder-radius: 3px;\nwidth: 32px;\nheight: 32px;\n" +
"display: inline;\nborder: none;\n}\n\n.comment > td > div.inner > .content {\noverflo" +
"w: hidden;\nword-wrap: break-word;\nmargin:0;\npadding:0;\npadding-left: 43px;\n}\n\n.a" +
"ddcomment {\nbackground:#EED;\nborder:1px solid #BBC;\n}\n\n.addcomment textarea {\nbo" +
"rder:1px solid #999999;\nwidth:100%;\nmargin:5px 5px;\npadding:3px;\n-webkit-box-siz" +
"ing: border-box;\n-moz-box-sizing: border-box;\nbox-sizing: border-box;\n}\n\n.addcom" +
"ment .inner {\npadding: 10px 10px;\n}\n\n.addcomment a.ok {\n border:1px solid #25729" +
"a; -webkit-border-radius: 3px; -moz-border-radius: 3px;border-radius: 3px;font-s" +
"ize:12px;font-family:arial, helvetica, sans-serif; padding: 10px 10px 10px 10px;" +
" text-decoration:none; display:inline-block;text-shadow: -1px -1px 0 rgba(0,0,0," +
"0.3);font-weight:bold; color: #FFFFFF;\n background-color: #3093c7; background-im" +
"age: -webkit-gradient(linear, left top, left bottom, from(#3093c7), to(#1c5a85))" +
";\n background-image: -webkit-linear-gradient(top, #3093c7, #1c5a85);\n background" +
"-image: -moz-linear-gradient(top, #3093c7, #1c5a85);\n background-image: -ms-line" +
"ar-gradient(top, #3093c7, #1c5a85);\n background-image: -o-linear-gradient(top, #" +
"3093c7, #1c5a85);\n background-image: linear-gradient(to bottom, #3093c7, #1c5a85" +
");filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr" +
"=#3093c7, endColorstr=#1c5a85);\n margin-left: 5px;\n}\n\n.addcomment a.cancel {\n   " +
" margin-left: 20px;\n    color: #3b73af;\n    text-decoration: none;\n}\n</style>\n</" +
"head>\n    <body>\n\t\t<table");

WriteLiteral(" class=\"diff\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(">\n\t\t    <thead>\n                <tr>\n                    </th></th>\n             " +
"       </th></th>\n\t\t\t\t    </th></th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n");


#line 149 "DiffView.cshtml"
                

#line default
#line hidden

#line 149 "DiffView.cshtml"
                 foreach (var h in Model.Patch)
                {
                    var oLine = h.OldStart;
                    var nLine = h.NewStart;
                    foreach (var l in h.Lines)
                    {


#line default
#line hidden
WriteLiteral("                        <tr>\n");


#line 156 "DiffView.cshtml"
					        

#line default
#line hidden

#line 156 "DiffView.cshtml"
                             if(!l.StartsWith("+"))
                            {


#line default
#line hidden
WriteLiteral("                                <th>");


#line 158 "DiffView.cshtml"
                               Write(oLine);


#line default
#line hidden
WriteLiteral("</th>\n");


#line 159 "DiffView.cshtml"
                                oLine = oLine + 1;
                            }
                            else
                            {


#line default
#line hidden
WriteLiteral("\t\t\t\t\t            <th>&nbsp;</th>\n");


#line 164 "DiffView.cshtml"
					        }


#line default
#line hidden
WriteLiteral("\t\t\t\t\t\n");


#line 166 "DiffView.cshtml"
                            

#line default
#line hidden

#line 166 "DiffView.cshtml"
                             if(!l.StartsWith("-"))
                            {


#line default
#line hidden
WriteLiteral("                                <th>");


#line 168 "DiffView.cshtml"
                               Write(nLine);


#line default
#line hidden
WriteLiteral("</th>\n");


#line 169 "DiffView.cshtml"
                                nLine = nLine + 1;
                            }
                            else
                            {


#line default
#line hidden
WriteLiteral("                                <th>&nbsp;</th>\n");


#line 174 "DiffView.cshtml"
                            }


#line default
#line hidden
WriteLiteral("\t\t\t\t\t\n                            <td><pre>");


#line 176 "DiffView.cshtml"
                                Write(l);


#line default
#line hidden
WriteLiteral("</pre></td>\n        \t\t\t    </tr>\n");


#line 178 "DiffView.cshtml"
                    }
                }


#line default
#line hidden
WriteLiteral("\t\t\t</tbody>\n\t\t</table>\n    </body>\n</html>\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class DiffViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
